# The compiler to use.
CC = g++

# The standard to use.
STD = c++20

# Pre-compiler and Compiler flags
CXX_FLAGS := -std=$(STD) -Wall -Wextra -g
PRE_FLAGS := -MMD -MP

# Project directory structure
BIN := bin
SRC := src
# LIB := lib
INC := include
MAINFILE := $(SRC)/main.cpp

# Build directories and output
TARGET := $(BIN)/main
BUILD := build

# Library search directories and flags
EXT_LIB :=
LDFLAGS := -lole32 -loleaut32 -lws2_32 -lwbemuuid -ljsoncpp
LDPATHS := # $(addprefix -L,$(LIB) $(EXT_LIB))

# Include directories
INC_DIRS := include
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# Construct build output and dependency filenames
# SRCS := $(shell find $(SRC) -name *.cpp)
SRCS :=  src/.main.cpp src/EventSink/EventSink.ccp src/Mapper/Mapper.cpp src/Reader/ReadCSV.cpp src/Writer/WriteCSV.cpp
# OBJS := $(subst $(SRC)/,$(BUILD)/,$(addsuffix .o,$(basename $(SRCS))))
OBJS := obj/main.o obj/EventSink.o obj/Mapper.o obj/ReadCSV.o obj/WriteCSV.o
DEPS := $(OBJS:.o=.d)

# Run task
run: build
	@echo "ðŸš€ Executing..."
	./$(TARGET) $(ARGS)

# Build task
build: clean all

# Main task
all: $(TARGET)

# Task producing target from built files
$(TARGET): $(OBJS)
	@echo "ðŸš§ Building..."
	mkdir -p $(dir $@)
	$(CC) $(CXX) $(OBJS) -o $@ $(LDPATHS) $(LDFLAGS)

# Compile all cpp files
$(BUILD)/%.o: $(SRC)/%.cpp
	mkdir -p $(dir $@)
	$(CC) $(CXX) $(CXX_FLAGS) $(PRE_FLAGS) $(INC_FLAGS) -c -o $@ $< $(LDPATHS) $(LDFLAGS)

# Clean task
.PHONY: clean
clean:
	@echo "ðŸ§¹ Clearing..."
	rm -rf build

# Include all dependencies
-include $(DEPS)